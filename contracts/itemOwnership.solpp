// SPDX-License-Identifier: MIT
pragma soliditypp >=0.8.0;

import "./item.solpp";
import "./ISimpleERC721.sol";
import "./openzeppelin/utils/math/SafeMath.sol";

contract ItemOwnership is ISimpleERC721, ItemFactory {
    using SafeMath for uint256;

  mapping (uint => address) itemApprovals;

  function balanceOf(address _owner) public override view returns (uint256 _balance) {
    return ownerItemCount[_owner];
  }

  function ownerOf(uint256 _tokenId) public override view returns (address _owner) {
    return itemToOwner[_tokenId];
  }

  function _transfer(address _from, address _to, uint256 _tokenId) private {
    ownerItemCount[_to] = ownerItemCount[_to].add(1);
    ownerItemCount[_from] = ownerItemCount[_from].sub(1);
    itemToOwner[_tokenId] = _to;
    Transfer(_from, _to, _tokenId);
  }

  function transfer(address _to, uint256 _tokenId) external override onlyOwnerOf(_tokenId) {
    _transfer(msg.sender, _to, _tokenId);
  }

  function approve(address _to, uint256 _tokenId) external override onlyOwnerOf(_tokenId) {
    itemApprovals[_tokenId] = _to;
    Approval(msg.sender, _to, _tokenId);
  }

  function takeOwnership(uint256 _tokenId) external override {
    require(itemApprovals[_tokenId] == msg.sender);
    address owner = ownerOf(_tokenId);
    _transfer(owner, msg.sender, _tokenId);
  }
}

