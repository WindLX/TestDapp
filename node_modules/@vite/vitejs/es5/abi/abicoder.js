"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultAbiCoder = exports.AbiCoder = void 0;
var coder_1 = require("./coder");
var address_1 = require("./coder/address");
var array_1 = require("./coder/array");
var boolean_1 = require("./coder/boolean");
var bytes_1 = require("./coder/bytes");
var null_1 = require("./coder/null");
var number_1 = require("./coder/number");
var string_1 = require("./coder/string");
var tuple_1 = require("./coder/tuple");
var tokenId_1 = require("./coder/tokenId");
var gid_1 = require("./coder/gid");
var fragments_1 = require("./fragments");
var utils_1 = require("./utils");
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var AbiCoder = (function () {
    function AbiCoder() {
    }
    AbiCoder.prototype._getCoder = function (param) {
        var _this = this;
        switch (param.baseType) {
            case 'address':
                return new address_1.AddressCoder(param.name);
            case 'tokenId':
                return new tokenId_1.TokenIdCoder(param.name);
            case 'gid':
                return new gid_1.GidCoder(param.name);
            case 'bool':
                return new boolean_1.BooleanCoder(param.name);
            case 'string':
                return new string_1.StringCoder(param.name);
            case 'bytes':
                return new bytes_1.BytesCoder(param.name);
            case 'array':
                return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
            case 'tuple':
                return new tuple_1.TupleCoder((param.components || []).map(function (component) { return _this._getCoder(component); }), param.name);
            case '':
                return new null_1.NullCoder(param.name);
        }
        var match = param.type.match(paramTypeNumber);
        if (match) {
            var size = parseInt(match[2] || '256');
            if (size === 0 || size > 256 || (size % 8) !== 0) {
                throw new Error("invalid ".concat(match[1], " bit length, ").concat(param));
            }
            return new number_1.NumberCoder(size / 8, (match[1] === 'int'), param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
            var size = parseInt(match[1]);
            if (size === 0 || size > 32) {
                throw new Error("invalid bytes length, ".concat(param));
            }
            return new bytes_1.FixedBytesCoder(size, param.name);
        }
        throw new Error("invalid type,  ".concat(param.type));
    };
    AbiCoder.prototype._getWordSize = function () {
        return 32;
    };
    AbiCoder.prototype._getReader = function (data, allowLoose) {
        return new coder_1.Reader(data, this._getWordSize(), allowLoose);
    };
    AbiCoder.prototype._getWriter = function () {
        return new coder_1.Writer(this._getWordSize());
    };
    AbiCoder.prototype.getDefaultValue = function (types) {
        var _this = this;
        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
        var coder = new tuple_1.TupleCoder(coders, '_');
        return coder.defaultValue();
    };
    AbiCoder.prototype.encode = function (types, values) {
        var _this = this;
        if (typeof (values) === 'string') {
            values = JSON.parse(values);
        }
        if (types.length !== values.length) {
            throw new Error("types/values length mismatch, types: ".concat(types.length, ", values: ").concat(values.length));
        }
        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
        var coder = new tuple_1.TupleCoder(coders, '_');
        var writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
    };
    AbiCoder.prototype.decode = function (types, data, loose) {
        var _this = this;
        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
        var coder = new tuple_1.TupleCoder(coders, '_');
        return coder.decode(this._getReader((0, utils_1.arrayify)(data), loose));
    };
    return AbiCoder;
}());
exports.AbiCoder = AbiCoder;
exports.defaultAbiCoder = new AbiCoder();
