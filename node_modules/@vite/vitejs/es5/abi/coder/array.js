"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayCoder = void 0;
var index_1 = require("./index");
var ArrayCoder = (function (_super) {
    __extends(ArrayCoder, _super);
    function ArrayCoder(coder, length, localName) {
        var _this = this;
        var type = ("".concat(coder.type, "[").concat(length >= 0 ? length : '', "]"));
        var dynamic = (length === -1 || coder.dynamic);
        _this = _super.call(this, 'array', type, localName, dynamic) || this;
        _this.coder = coder;
        _this.length = length;
        return _this;
    }
    ArrayCoder.prototype.defaultValue = function () {
        var defaultChild = this.coder.defaultValue();
        var result = [];
        for (var i = 0; i < this.length; i++) {
            result.push(defaultChild);
        }
        return result;
    };
    ArrayCoder.prototype.encode = function (writer, value) {
        if (typeof (value) === 'string') {
            value = JSON.parse(value);
        }
        if (!Array.isArray(value)) {
            throw new Error("expected array value: ".concat(value));
        }
        var count = this.length;
        if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
        }
        if (value.length !== count) {
            throw new Error("array value and size mismatch: ".concat(value, ", size: ").concat(count));
        }
        var coders = [];
        for (var i = 0; i < value.length; i++) {
            coders.push(this.coder);
        }
        return this.pack(writer, coders, value);
    };
    ArrayCoder.prototype.decode = function (reader) {
        var count = this.length;
        if (count === -1) {
            count = reader.readValue().toNumber();
            if (count * 32 > reader._data.length) {
                throw new Error("insufficient data length: ".concat(reader._data.length, ", count: ").concat(count));
            }
        }
        var coders = [];
        for (var i = 0; i < count; i++) {
            coders.push(this.coder);
        }
        return reader.coerce(this, this.unpack(reader, coders));
    };
    return ArrayCoder;
}(index_1.Coder));
exports.ArrayCoder = ArrayCoder;
