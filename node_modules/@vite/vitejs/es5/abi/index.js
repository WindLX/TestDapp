"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAbiByName = exports.getAbiByType = exports.encodeLogFilter = exports.decodeLog = exports.decodeParameters = exports.encodeParameters = exports.decodeParameter = exports.encodeParameter = exports.encodeConstructor = exports.decodeOffchainOutput = exports.encodeOffchainCall = exports.decodeFunctionOutput = exports.decodeFunctionCall = exports.encodeFunctionCall = exports.encodeFunctionSignature = exports.encodeLogSignature = exports.utils = exports.Abi = void 0;
var abicoder_1 = require("./abicoder");
var abi_1 = require("./abi");
Object.defineProperty(exports, "Abi", { enumerable: true, get: function () { return abi_1.Abi; } });
var fragments_1 = require("./fragments");
var utils = require("./utils");
exports.utils = utils;
function encodeLogSignature(abiFragment, eventName) {
    return abi_1.Abi.from(abiFragment).getEventTopic(eventName);
}
exports.encodeLogSignature = encodeLogSignature;
function encodeFunctionSignature(abiFragment, methodName) {
    return abi_1.Abi.from(abiFragment).getSighash(methodName);
}
exports.encodeFunctionSignature = encodeFunctionSignature;
function encodeFunctionCall(abiFragment, params, methodName) {
    return abi_1.Abi.from(abiFragment).encodeFunctionData(methodName, params);
}
exports.encodeFunctionCall = encodeFunctionCall;
function decodeFunctionCall(abiFragment, data, methodName) {
    return abi_1.Abi.from(abiFragment).decodeFunctionData(methodName, data);
}
exports.decodeFunctionCall = decodeFunctionCall;
function decodeFunctionOutput(abiFragment, data, methodName) {
    return abi_1.Abi.from(abiFragment).decodeFunctionResult(methodName, data);
}
exports.decodeFunctionOutput = decodeFunctionOutput;
function encodeOffchainCall(abiFragment, params, methodName) {
    return abi_1.Abi.from(abiFragment).encodeOffchainData(methodName, params);
}
exports.encodeOffchainCall = encodeOffchainCall;
function decodeOffchainOutput(abiFragment, data, methodName) {
    return abi_1.Abi.from(abiFragment).decodeOffchainResult(methodName, data);
}
exports.decodeOffchainOutput = decodeOffchainOutput;
function encodeConstructor(abiFragment, params) {
    return abi_1.Abi.from(abiFragment).encodeDeploy(params);
}
exports.encodeConstructor = encodeConstructor;
function encodeParameter(type, param) {
    return abicoder_1.defaultAbiCoder.encode([fragments_1.ParamType.from(type)], [param]);
}
exports.encodeParameter = encodeParameter;
function decodeParameter(type, data) {
    return abicoder_1.defaultAbiCoder.decode([fragments_1.ParamType.from(type)], data)[0];
}
exports.decodeParameter = decodeParameter;
function encodeParameters(types, params, methodName) {
    return abicoder_1.defaultAbiCoder.encode(getTypes(types, methodName), params || []);
}
exports.encodeParameters = encodeParameters;
function decodeParameters(types, data, methodName) {
    return abicoder_1.defaultAbiCoder.decode(getTypes(types, methodName), data);
}
exports.decodeParameters = decodeParameters;
function decodeLog(abiFragment, data, topics, eventName) {
    if (data === void 0) { data = ''; }
    return abi_1.Abi.from(abiFragment).decodeEventLog(eventName, data, topics);
}
exports.decodeLog = decodeLog;
function encodeLogFilter(abiFragment, values, eventName) {
    return abi_1.Abi.from(abiFragment).encodeFilterTopics(eventName, values);
}
exports.encodeLogFilter = encodeLogFilter;
function getAbiByType(jsonInterface, type) {
    if (!jsonInterface || !type) {
        return null;
    }
    var _frags = [];
    _parseJson(jsonInterface, _frags);
    return _frags.find(function (item) { return item.type === type; }) || null;
}
exports.getAbiByType = getAbiByType;
function getAbiByName(jsonInterface, methodName) {
    if (!jsonInterface || !methodName) {
        return null;
    }
    var _frags = [];
    _parseJson(jsonInterface, _frags);
    return _frags.find(function (item) { return item.name === methodName; }) || null;
}
exports.getAbiByName = getAbiByName;
function getTypes(types, methodName) {
    var _a;
    var _types = [];
    var _frags = [];
    var _parseInput = function (inputs, _types, _frags) {
        if (typeof (inputs) === 'string') {
            var jsonParam = utils.safeParseJson(inputs);
            if (jsonParam) {
                inputs = jsonParam;
            }
        }
        if (!Array.isArray(inputs)) {
            try {
                _types.push(fragments_1.ParamType.from(inputs));
                return;
            }
            catch (e) {
                try {
                    _frags.push(fragments_1.Fragment.from(inputs));
                    return;
                }
                catch (e) {
                    throw new Error("invalid type or fragment ".concat(inputs));
                }
            }
        }
        inputs.forEach(function (item) { return _parseInput(item, _types, _frags); });
    };
    _parseInput(types, _types, _frags);
    if (methodName) {
        var result = (_a = _frags.find(function (item) { return item.name === (item.type === 'callback' ? "".concat(methodName, "Callback") : methodName); })) === null || _a === void 0 ? void 0 : _a.inputs;
        return result ? result : [];
    }
    if (_frags.length === 1) {
        return _frags[0].inputs;
    }
    else if (_frags.length > 1) {
        throw new Error('missing method name');
    }
    return _types;
}
function _parseJson(inputs, result) {
    if (typeof (inputs) === 'string') {
        try {
            inputs = JSON.parse(inputs);
        }
        catch (e) {
            throw new Error("invalid jsonFragment: ".concat(inputs));
        }
    }
    if (!Array.isArray(inputs)) {
        result.push(inputs);
        return;
    }
    inputs.forEach(function (item) { return _parseJson(item, result); });
}
