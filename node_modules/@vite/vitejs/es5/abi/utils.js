"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArrayDepth = exports.safeParseJson = exports.rightPadZero = exports.leftPadZero = exports.arrayify = exports.hexlify = void 0;
var vitejs_utils_1 = require("../utils/index.js");
var HexCharacters = '0123456789abcdef';
function hexlify(value) {
    if (typeof (value) === 'number') {
        if (value < 0 || value >= 0x1fffffffffffff) {
            throw new Error("invalid hexlify value ".concat(value));
        }
        var hex = '';
        while (value) {
            hex = HexCharacters[value & 0xf] + hex;
            value = Math.floor(value / 16);
        }
        if (hex.length) {
            if (hex.length % 2) {
                hex = "0".concat(hex);
            }
            return "".concat(hex);
        }
        return '00';
    }
    if (typeof (value) === 'bigint') {
        if (value < 0) {
            throw new Error("invalid hexlify value ".concat(value));
        }
        value = value.toString(16);
        if (value.length % 2) {
            return ("0".concat(value));
        }
        return "".concat(value);
    }
    if (typeof (value) === 'string') {
        if (value.substring(0, 2) === '0x') {
            value = value.substring(2);
        }
        if ((0, vitejs_utils_1.isHexString)(value)) {
            if (value.length % 2) {
                value = "0".concat(value);
            }
            return value;
        }
        throw new Error("not hex string ".concat(value));
    }
    if (Buffer.isBuffer(value)) {
        return value.toString('hex');
    }
    if (value.constructor === Uint8Array) {
        return Buffer.from(value).toString('hex');
    }
    throw new Error("invalid hexlify value ".concat(value));
}
exports.hexlify = hexlify;
function arrayify(value) {
    if (typeof (value) === 'number') {
        if (value < 0 || value >= 0x1fffffffffffff) {
            throw new Error("invalid arrayify value ".concat(value));
        }
        var result = [];
        while (value) {
            result.unshift(value & 0xff);
            value = parseInt(String(value / 256));
        }
        if (result.length === 0) {
            result.push(0);
        }
        return Buffer.from(result);
    }
    if (typeof (value) === 'bigint') {
        if (value < 0) {
            throw new Error("invalid arrayify value ".concat(value));
        }
        value = value.toString(16);
        if (value.length % 2) {
            value = "0".concat(value);
        }
        return Buffer.from(value.toString(), 'hex');
    }
    if (typeof (value) === 'string') {
        if (value.substring(0, 2) === '0x') {
            value = value.substring(2);
        }
        if ((0, vitejs_utils_1.isHexString)(value)) {
            if (value.length % 2) {
                value = "0".concat(value);
            }
            return Buffer.from(value.toString(), 'hex');
        }
        throw new Error("not hex string ".concat(value));
    }
    if (Buffer.isBuffer(value) || value.constructor === Uint8Array) {
        return Buffer.from(value);
    }
    throw new Error("invalid arrayify value ".concat(value));
}
exports.arrayify = arrayify;
function leftPadZero(value, length) {
    if (typeof (value) !== 'string') {
        value = hexlify(value);
    }
    else if (!(0, vitejs_utils_1.isHexString)(value)) {
        throw new Error("invalid hex string: ".concat(value));
    }
    if (value.length > 2 * length) {
        throw new Error("value out of range: ".concat(value, ", length: ").concat(length));
    }
    while (value.length < 2 * length) {
        value = "0".concat(value);
    }
    return value;
}
exports.leftPadZero = leftPadZero;
function rightPadZero(value, length) {
    if (typeof (value) !== 'string') {
        value = hexlify(value);
    }
    else if (!(0, vitejs_utils_1.isHexString)(value)) {
        throw new Error("invalid hex string: ".concat(value));
    }
    if (value.length > 2 * length) {
        throw new Error("value out of range: ".concat(value, ", length: ").concat(length));
    }
    while (value.length < 2 * length) {
        value = "".concat(value, "0");
    }
    return value;
}
exports.rightPadZero = rightPadZero;
function safeParseJson(value) {
    if (typeof value !== 'string')
        return null;
    try {
        var result = JSON.parse(value);
        var type = Object.prototype.toString.call(result);
        return (type === '[object Object]' || type === '[object Array]') ? result : null;
    }
    catch (err) {
        return null;
    }
}
exports.safeParseJson = safeParseJson;
function getArrayDepth(value) {
    return Array.isArray(value) ? 1 + Math.max.apply(Math, __spreadArray([0], value.map(getArrayDepth), false)) : 0;
}
exports.getArrayDepth = getArrayDepth;
