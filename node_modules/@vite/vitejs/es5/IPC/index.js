"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPC_RPC = void 0;
var ipc_ws_1 = require("../communication/ipc_ws");
var net = require('net');
var IpcRpc = (function (_super) {
    __extends(IpcRpc, _super);
    function IpcRpc(path, timeout, options) {
        if (path === void 0) { path = ''; }
        if (timeout === void 0) { timeout = 60000; }
        if (options === void 0) { options = { delimiter: '\n' }; }
        var _this = _super.call(this, {
            onEventTypes: ['error', 'end', 'timeout', 'data', 'close', 'connect'],
            sendFuncName: 'write',
            path: path
        }) || this;
        if (!path) {
            throw _this.ERRORS.CONNECT();
        }
        _this.type = 'ipc';
        _this.timeout = timeout;
        _this.delimiter = options.delimiter;
        _this.socket = net.connect({ path: path });
        _this.socket.on('connect', function () {
            _this._connected();
        });
        _this.socket.on('close', function () {
            _this._closed();
        });
        _this.socket.on('error', function (err) {
            _this._errored(err);
        });
        _this.socket.on('end', function (msg) {
            _this._connectEnd && _this._connectEnd(msg);
        });
        _this.socket.on('timeout', function () {
            _this._connectTimeout && _this._connectTimeout();
            _this.socket.end();
        });
        var ipcBuffer = '';
        _this.socket.on('data', function (data) {
            data = data ? data.toString() : '';
            if (data.slice(-1) !== _this.delimiter || data.indexOf(_this.delimiter) === -1) {
                ipcBuffer += data;
                return;
            }
            data = ipcBuffer + data;
            ipcBuffer = '';
            data = data.split(_this.delimiter);
            _this._parse(data);
        });
        return _this;
    }
    IpcRpc.prototype.reconnect = function () {
        this.socket.connect({ path: this.path });
    };
    IpcRpc.prototype.disconnect = function () {
        this.socket && this.socket.destroy && this.socket.destroy();
    };
    IpcRpc.prototype.setTimeout = function (ms) {
        this.socket && this.socket.setTimeout(ms);
    };
    IpcRpc.prototype.destroy = function () {
        this.remove('error');
        this.remove('close');
        this.remove('connect');
        this.remove('end');
        this.remove('timeout');
        this.disconnect();
        this.socket = null;
    };
    return IpcRpc;
}(ipc_ws_1.default));
exports.IPC_RPC = IpcRpc;
exports.default = exports.IPC_RPC;
