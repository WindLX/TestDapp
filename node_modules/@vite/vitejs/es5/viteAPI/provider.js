"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenewSubscription = exports.AlwaysReconnect = exports.ReconnectHandler = exports.ConnectHandler = exports.Provider = void 0;
var vitejs_error_1 = require("../error/index.js");
var eventEmitter_1 = require("./eventEmitter");
var ProviderClass = (function () {
    function ProviderClass(provider, onInitCallback, onConnectCallback) {
        this.isConnected = false;
        this.requestList = {};
        this.subscriptionList = {};
        this.subscriptionId = 0;
        this.requestId = 0;
        this.connectHandler = null;
        this._provider = provider;
        this.connectHandler = onConnectCallback || new ReconnectHandler();
        this.connectHandler.init(this);
        this.connectHandler.setConnectListener(onInitCallback);
    }
    ProviderClass.prototype.setProvider = function (provider, onInitCallback, abort) {
        abort && this._provider.abort(abort);
        this.unsubscribeAll();
        if (!provider) {
            return;
        }
        this._provider = provider;
        this.isConnected = false;
        this.connectHandler.setConnectListener(onInitCallback);
    };
    ProviderClass.prototype.unsubscribe = function (event) {
        if (this.subscriptionList[event['_id'] || 0] !== event)
            return;
        event && event.stopLoop();
        delete this.subscriptionList[event['_id']];
        if (!Object.keys(this.subscriptionList).length) {
            this._provider.unsubscribe && this._provider.unsubscribe();
        }
    };
    ProviderClass.prototype.unsubscribeAll = function () {
        Object.values(this.subscriptionList).forEach(function (s) {
            s.stopLoop();
        });
        this.subscriptionList = {};
        this._provider.unsubscribe && this._provider.unsubscribe();
    };
    ProviderClass.prototype.request = function (methods) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var rep;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected) {
                            return [2, this._onReq.apply(this, __spreadArray(['request', methods], args, false))];
                        }
                        return [4, this._provider.request(methods, args)];
                    case 1:
                        rep = _a.sent();
                        if (rep.error) {
                            throw rep.error;
                        }
                        return [2, rep.result];
                }
            });
        });
    };
    ProviderClass.prototype.sendNotification = function (methods) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.isConnected) {
                    return [2, this._onReq.apply(this, __spreadArray(['sendNotification', methods], args, false))];
                }
                return [2, this._provider.sendNotification(methods, args)];
            });
        });
    };
    ProviderClass.prototype.batch = function (reqs) {
        return __awaiter(this, void 0, void 0, function () {
            var reps;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected) {
                            return [2, this._onReq('batch', reqs)];
                        }
                        reqs.forEach(function (v) {
                            v.type = v.type || 'request';
                        });
                        return [4, this._provider.batch(reqs)];
                    case 1:
                        reps = _a.sent();
                        return [2, reps];
                }
            });
        });
    };
    ProviderClass.prototype.subscribe = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var subMethodName, params, rep, subscription, event;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subMethodName = this._provider.subscribe ? 'subscribe_subscribe' : "subscribe_".concat(methodName, "Filter");
                        params = this._provider.subscribe ? __spreadArray([methodName], args, true) : args;
                        if (!this.isConnected) return [3, 2];
                        return [4, this._provider.request(subMethodName, params)];
                    case 1:
                        rep = _a.sent();
                        rep = rep.result;
                        return [3, 4];
                    case 2: return [4, this._onReq.apply(this, __spreadArray(['request', subMethodName], params, false))];
                    case 3:
                        rep = _a.sent();
                        _a.label = 4;
                    case 4:
                        subscription = rep;
                        if (!Object.keys(this.subscriptionList).length) {
                            this.subscriptionList = {};
                            this._provider.subscribe && this._provider.subscribe(function (jsonEvent) {
                                _this.subscribeCallback(jsonEvent);
                            });
                        }
                        event = new eventEmitter_1.default(subscription, this, !!this._provider.subscribe, { method: subMethodName, params: params });
                        if (!this._provider.subscribe) {
                            event.startLoop(function (jsonEvent) {
                                _this.subscribeCallback(jsonEvent);
                            });
                        }
                        event['_id'] = this.subscriptionId++;
                        this.subscriptionList[event['_id']] = event;
                        return [2, event];
                }
            });
        });
    };
    ProviderClass.prototype._offReq = function (_q) {
        delete this.requestList[_q._id];
    };
    ProviderClass.prototype._onReq = function (type, methods) {
        var _this = this;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return new Promise(function (res, rej) {
            var _q = function () {
                _this[type].apply(_this, __spreadArray([methods], args, false)).then(function (data) {
                    clearTimeout(_timeout);
                    _this._offReq(_q);
                    res(data);
                }).catch(function (err) {
                    _this._offReq(_q);
                    clearTimeout(_timeout);
                    rej(err);
                });
            };
            _q._id = _this.requestId++;
            _this.requestList[_q._id] = _q;
            var _timeout = setTimeout(function () {
                _this._offReq(_q);
                rej(vitejs_error_1.requestTimeout);
            }, _this._provider._timeout || 30000);
        });
    };
    ProviderClass.prototype.subscribeCallback = function (jsonEvent) {
        if (!jsonEvent) {
            return;
        }
        var id = jsonEvent.params && jsonEvent.params.subscription ? jsonEvent.params.subscription : jsonEvent.subscription || '';
        if (!id) {
            return;
        }
        Object.values(this.subscriptionList).forEach(function (s) {
            if (s.id !== id) {
                return;
            }
            var result = jsonEvent.params && jsonEvent.params.result ? jsonEvent.params.result : jsonEvent.result || null;
            if (!result) {
                return;
            }
            s.emit(result);
        });
    };
    return ProviderClass;
}());
exports.Provider = ProviderClass;
exports.default = exports.Provider;
var ConnectHandler = (function () {
    function ConnectHandler() {
    }
    ConnectHandler.prototype.init = function (provider) {
        var _this = this;
        if (this.provider) {
            throw new Error('Connect handler already initialized');
        }
        this.provider = provider;
        this.connectedCB = function () {
            _this.provider.isConnected = true;
            _this.provider.requestList && Object.values(_this.provider.requestList).forEach(function (_q) {
                _q && _q();
            });
            _this.onInitCallback && _this.onInitCallback(_this.provider);
        };
    };
    ConnectHandler.prototype.setConnectListener = function (callback) {
        var _this = this;
        if (!this.provider) {
            throw new Error('Connect handler must be initialized first');
        }
        this.onInitCallback = callback;
        if (this.provider._provider.type === 'http' || this.provider._provider.connectStatus) {
            this.connectedCB();
        }
        else if (this.provider._provider.on) {
            this.provider._provider.on('connect', function () {
                _this.connectedCB();
                _this.onConnect();
            });
            this.provider._provider.on('close', function () {
                _this.onClose();
            });
            this.provider._provider.on('error', function (err) {
                _this.onError(err);
            });
            if (this.provider._provider.type === 'ipc') {
                this.provider._provider.on('end', function (msg) {
                    _this.onEnd(msg);
                });
                this.provider._provider.on('timeout', function () {
                    _this.onTimeout();
                });
            }
        }
    };
    ConnectHandler.prototype.onConnect = function () { };
    ConnectHandler.prototype.onClose = function () {
        this.setReconnect();
    };
    ConnectHandler.prototype.onError = function (err) { };
    ConnectHandler.prototype.onEnd = function (msg) { };
    ConnectHandler.prototype.onTimeout = function () { };
    return ConnectHandler;
}());
exports.ConnectHandler = ConnectHandler;
var ReconnectHandler = (function (_super) {
    __extends(ReconnectHandler, _super);
    function ReconnectHandler(retryTimes, retryInterval) {
        if (retryTimes === void 0) { retryTimes = 10; }
        if (retryInterval === void 0) { retryInterval = 10000; }
        var _this = _super.call(this) || this;
        _this.times = 1;
        _this.retryTimes = retryTimes;
        _this.retryInterval = retryInterval;
        return _this;
    }
    ReconnectHandler.prototype.setReconnect = function () {
        var _this = this;
        if (this.times > this.retryTimes) {
            return;
        }
        setTimeout(function () {
            _this.times++;
            _this.provider._provider.reconnect();
        }, this.retryInterval);
    };
    return ReconnectHandler;
}(ConnectHandler));
exports.ReconnectHandler = ReconnectHandler;
var AlwaysReconnect = (function (_super) {
    __extends(AlwaysReconnect, _super);
    function AlwaysReconnect(retryInterval) {
        if (retryInterval === void 0) { retryInterval = 10000; }
        return _super.call(this, 1, retryInterval) || this;
    }
    AlwaysReconnect.prototype.onConnect = function () {
        this.times = 0;
    };
    return AlwaysReconnect;
}(ReconnectHandler));
exports.AlwaysReconnect = AlwaysReconnect;
var RenewSubscription = (function (_super) {
    __extends(RenewSubscription, _super);
    function RenewSubscription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RenewSubscription.prototype.onConnect = function () {
        var _this = this;
        Object.values(this.provider.subscriptionList).forEach(function (e) { return __awaiter(_this, void 0, void 0, function () {
            var rep;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(e.isSubscribe && e.payload)) return [3, 2];
                        return [4, this.provider._provider.request(e.payload.method, e.payload.params)];
                    case 1:
                        rep = _a.sent();
                        e.id = rep.result;
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        }); });
    };
    return RenewSubscription;
}(ReconnectHandler));
exports.RenewSubscription = RenewSubscription;
